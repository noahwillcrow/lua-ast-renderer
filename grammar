
string ::= '"' /[^"]/ '"'

block ::= {statement [';']} [lastStatement[';']]

expression ::=
	| 'nil'
	| 'false'
	| 'true'
	| number
	| string
	| '...'
	| function
	| prefixExpression
	| tableLiteral
	| expression binaryOperator expression
	| unaryOperator expression

statement ::=
	| identifier {',' identifier} '=' expressionList
	| callExpression
	| 'do' block 'end'
	| 'while' expression 'do' block 'end'
	| repeat block until expression
	| if expression then block {elseif expression then block} [else block] 'end'
	| 'for' name '=' expression ',' expression [',' expression] 'do' block 'end'
	| for nameList in expressionList do block end
	| function name {'.' name} [':' name] funcBody
	| local function name funcBody
	| local nameList ['=' expressionList]

lastStatement ::= return [expressionList] | break

identifier ::=  name | prefixExpression '[' expression ']' | prefixExpression '.' name

nameList ::= name {',' name}

expressionList ::= {expression ','} expression

prefixExpression ::= identifier | callExpression | '(' expression ')'

callExpression ::=  prefixExpression args | prefixExpression ':' name args

args ::=  '(' [expressionList] ')' | tableLiteral  | string

function ::= function funcBody

funcBody ::= '(' [parlist1] ')' block end

parlist1 ::= nameList [',' '...'] | '...'

tableLiteral ::= '{' [fieldlist] '}'

fieldlist ::= field ',' { field ',' }

field ::= '[' expression ']' '=' expression | name '=' expression | expression

binaryOperator ::=
	| '+'
	| '-'
	| '*'
	| '/'
	| '^'
	| '%'
	| '..'
	| '<'
	| '<='
	| '>'
	| '>='
	| '=='
	| '~='
	| and
	| or

unaryOperator ::= '-' | not | '#'
